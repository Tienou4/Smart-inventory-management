generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? 
  image         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)
  accounts      Account[]
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String  
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  name          String        @db.VarChar(255)
  description   String?       @db.Text
  sku           String        @unique @db.VarChar(100)
  barcode       String?       @db.VarChar(100)
  category      String        @db.VarChar(100)
  price         Float         @default(0.0)
  cost          Float         @default(0.0)
  stock         Int           @default(0)
  minStock      Int           @default(0)
  maxStock      Int?
  location      String?       @db.VarChar(100)
  supplier      String?       @db.VarChar(100)
  status        ProductStatus @default(ACTIVE)
  featured      Boolean       @default(false)
  images        ProductImage[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String   @db.Text
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  isMain    Boolean  @default(false)

  @@map("product_images")
}